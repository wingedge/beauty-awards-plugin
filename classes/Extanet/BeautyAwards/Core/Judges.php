<?phpnamespace Extanet\BeautyAwards\Core;use Extanet\BeautyAwards\Core\Categories;use Extanet\BeautyAwards\Core\Entries;use Extanet\BeautyAwards\Database\Tables;use Extanet\BeautyAwards\Database\Field;class Judges {    const role_key_judge = 'extanet_beautyawards_judge';    const table_name_categories = 'baw_judge_categories';    const table_name_score = 'baw_judge_scores';    static function get_judges() {        return get_users([            'role' => self::role_key_judge,            'orderby' => 'display_name',        ]);    }    static function exists($judge_id) {        $judge = get_user_by('ID', $judge_id);        if ($judge === FALSE) {            return FALSE;        }        if (!in_array(self::role_key_judge, $judge->roles)) {            return FALSE;        }        return TRUE;    }    static function can_juudge_entry($judge_id, $category_entry_id) {        global $wpdb;        return $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM `" . $wpdb->prefix . Entries::table_name_entry_categories . "` AS `tce`, `" . $wpdb->prefix . self::table_name_categories . "` AS `tjc` WHERE `tce`.`id` = %d AND `tjc`.`category_id` = `tce`.`category_id` AND `tjc`.`judge_id` = %d", intval(trim($category_entry_id)), intval(trim($judge_id)))) > 0;    }    static function get_categories($judge_id) {        $categories = [];        global $wpdb;        foreach ($wpdb->get_results($wpdb->prepare("SELECT `tjc`.`category_id` AS `category_id`, `tmc`.`parent_id` AS `parent_id` FROM `" . $wpdb->prefix . self::table_name_categories . "` AS `tjc`, `" . $wpdb->prefix . Categories::table_name . "` as `tmc` WHERE `tmc`.`id` = `tjc`.`category_id` AND `judge_id` = %d;", intval(trim($judge_id)))) as $category_item) {            if (!isset($categories[$category_item->parent_id])) {                $categories[$category_item->parent_id] = [];            }            $categories[$category_item->parent_id][] = $category_item->category_id;        }        return $categories;    }    static function get_categories_flat($judge_id) {        $fc = [];        $rc = self::get_categories($judge_id);        foreach ($rc as $pc) {            $fc = array_merge($fc, $pc);        }        return $fc;    }    static function set_categories($judge_id, $categories) {        if (!self::exists($judge_id)) {            return;        }        if (!is_array($categories)) {            $categories = [];        }        global $wpdb;        $current_categories = $wpdb->get_col($wpdb->prepare("SELECT `category_id` FROM `" . $wpdb->prefix . self::table_name_categories . '` WHERE `judge_id` = %d', $judge_id));        foreach ($categories as $category_id) {            if (Categories::exists($category_id)) {                if (($key = array_search($category_id, $current_categories)) === FALSE) {                    // not found - insert                    $wpdb->insert($wpdb->prefix . self::table_name_categories, [                        'category_id' => $category_id,                        'judge_id' => $judge_id,                    ]);                } else {                    // found - remove from remove list                    unset($current_categories[$key]);                }            }        }        foreach ($current_categories as $remove_id) {            $wpdb->delete($wpdb->prefix . self::table_name_categories, ['category_id' => $remove_id,]);        }    }    static function count_to_judge($judge_id) {        $judge_id = intval(trim($judge_id));        global $wpdb;        return $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM `" . $wpdb->prefix . Entries::table_name_entries . "` AS `te`, `" . $wpdb->prefix . Entries::table_name_entry_categories . "` AS `tce` WHERE IFNULL(`te`.`disqualified`, 0) = 0 AND `tce`.`entry_id` = `te`.`id` AND `tce`.`category_id` IN (SELECT `category_id` FROM `" . $wpdb->prefix . self::table_name_categories . "` WHERE `judge_id` = %d) AND `tce`.`id` NOT IN (SELECT `entry_category_id` FROM `" . $wpdb->prefix . self::table_name_score . "` WHERE `judge_id` = %d);", $judge_id, $judge_id));    }    static function count_judged($judge_id) {        $judge_id = intval(trim($judge_id));        global $wpdb;        return $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM `" . $wpdb->prefix . Entries::table_name_entries . "` AS `te`, `" . $wpdb->prefix . Entries::table_name_entry_categories . "` AS `tce` WHERE IFNULL(`te`.`disqualified`, 0) = 0 AND `tce`.`entry_id` = `te`.`id` AND `tce`.`category_id` IN (SELECT `category_id` FROM `" . $wpdb->prefix . self::table_name_categories . "` WHERE `judge_id` = %d) AND `tce`.`id` IN (SELECT `entry_category_id` FROM `" . $wpdb->prefix . self::table_name_score . "` WHERE `judge_id` = %d);", $judge_id, $judge_id));    }    static function get_to_judge($judge_id) {        $judge_id = intval(trim($judge_id));        global $wpdb;        return $wpdb->get_results($wpdb->prepare("SELECT `te`.*, `tce`.`id`, `tce`.`category_id`, `tc`.`name` FROM `" . $wpdb->prefix . Entries::table_name_entries . "` AS `te`, `" . $wpdb->prefix . Entries::table_name_entry_categories . "` AS `tce`, `" . $wpdb->prefix . Categories::table_name . "` AS `tc` WHERE IFNULL(`te`.`disqualified`, 0) = 0 AND `tce`.`entry_id` = `te`.`id` AND `tc`.`id` = `tce`.`category_id` AND `tce`.`category_id` IN (SELECT `category_id` FROM `" . $wpdb->prefix . self::table_name_categories . "` WHERE `judge_id` = %d) AND `tce`.`id` NOT IN (SELECT `entry_category_id` FROM `" . $wpdb->prefix . self::table_name_score . "` WHERE `judge_id` = %d) ORDER BY `te`.`created` ASC;", $judge_id, $judge_id));    }    static function get_judged($judge_id) {        $judge_id = intval(trim($judge_id));        global $wpdb;        return $wpdb->get_results($wpdb->prepare("SELECT `te`.*, `ts`.`score`, `ts`.`comment`, `tce`.`id`, `tce`.`category_id`, `tc`.`name` FROM `" . $wpdb->prefix . Entries::table_name_entries . "` AS `te`, `" . $wpdb->prefix . Entries::table_name_entry_categories . "` AS `tce`, `" . $wpdb->prefix . Categories::table_name . "` AS `tc`, `" . $wpdb->prefix . self::table_name_score . "` AS `ts` WHERE IFNULL(`te`.`disqualified`, 0) = 0 AND `tce`.`entry_id` = `te`.`id` AND `ts`.`entry_category_id` = `tce`.`id` AND `tc`.`id` = `tce`.`category_id` AND `tce`.`category_id` IN (SELECT `category_id` FROM `" . $wpdb->prefix . self::table_name_categories . "` WHERE `judge_id` = %d) AND `tce`.`id` IN (SELECT `entry_category_id` FROM `" . $wpdb->prefix . self::table_name_score . "` WHERE `judge_id` = %d) ORDER BY `te`.`created` ASC;", $judge_id, $judge_id));    }    static function score($category_entry_id, $judge_id, $score, $comment) {        $sc = [];        $sc['score'] = min(10, max(1, intval(trim($score))));        $sc['comment'] = trim($comment);        $wc = [];        $wc['entry_category_id'] = intval(trim($category_entry_id));        $wc['judge_id'] = intval(trim($judge_id));        global $wpdb;        if ($wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM `" . $wpdb->prefix . self::table_name_score . "` WHERE `entry_category_id` = %d AND `judge_id` = %d", $category_entry_id, $judge_id)) > 0) {            $wpdb->update($wpdb->prefix . self::table_name_score, $sc, $wc);        } else {            $wpdb->insert($wpdb->prefix . self::table_name_score, array_merge($sc, $wc));        }    }    static function get_score($category_entry_id) {        global $wpdb;        return $wpdb->get_row($wpdb->prepare("SELECT * FROM `" . $wpdb->prefix . self::table_name_score . "` WHERE `entry_category_id` = %d", intval(trim($category_entry_id))));    }    static function on_activate() {        if (wp_roles()->is_role(self::role_key_judge)) {            remove_role(self::role_key_judge);        }        add_role(self::role_key_judge, 'BeautyAwards Judge', ['read' => true,]);        global $wpdb;        if (!Tables::exists($wpdb->prefix . self::table_name_categories)) {            $fields = [];            $fields[] = new Field('category_id', 'INT(11)');            $fields[] = new Field('judge_id', 'INT(11)');            Tables::create($wpdb->prefix . self::table_name_categories, $fields);        }        if (!Tables::exists($wpdb->prefix . self::table_name_score)) {            $fields = [];            $fields[] = new Field('score', 'INT(11)');            $fields[] = new Field('comment', 'VARCHAR(300)');            $fields[] = new Field('entry_category_id', 'INT(11)');            $fields[] = new Field('judge_id', 'INT(11)');            $fields[] = new Field('created', 'INT(11)');            Tables::create($wpdb->prefix . self::table_name_score, $fields);        }    }    static function filter_login_redirect($url, $request, $user) {        if (isset($user->roles) && is_array($user->roles)) {            if (in_array(self::role_key_judge, $user->roles)) {                return admin_url('admin.php?page=baw_judge');            }        }        return $url;    }    static function initialize($pf) {        register_activation_hook($pf, [__CLASS__, 'on_activate',]);        add_filter('login_redirect', [__CLASS__, 'filter_login_redirect',], 10, 3);    }}